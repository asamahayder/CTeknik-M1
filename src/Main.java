import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.HashMap;


public class Main {
    public static void main(String[] args) throws IOException{

        // we expect exactly one argument: the name of the input file
        if (args.length!=1) {
            System.err.println("\n");
            System.err.println("Simple calculator\n");
            System.err.println("=================\n\n");
            System.err.println("Please give as input argument a filename\n");
            System.exit(-1);
        }
        String filename=args[0];

        // open the input file
        CharStream input = CharStreams.fromFileName(filename);
        //new ANTLRFileStream (filename); // depricated

        // create a lexer/scanner
        simpleCalcLexer lex = new simpleCalcLexer(input);

        // get the stream of tokens from the scanner
        CommonTokenStream tokens = new CommonTokenStream(lex);

        // create a parser
        simpleCalcParser parser = new simpleCalcParser(tokens);

        // and parse anything from the grammar for "start"
        ParseTree parseTree = parser.start();

        // Construct an interpreter and run it on the parse tree
        Interpreter interpreter = new Interpreter();
        Double result=interpreter.visit(parseTree);

        System.out.println("The result is: "+result);
    }
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {
    public static HashMap<String,Double> env=new HashMap<String,Double>();

    @Override
    //TODO der skal være et for-loop her. se evt. modul 4 opgven på inside
    public Double visitStart(simpleCalcParser.StartContext ctx) {
        return visit(ctx.s);
    }

    @Override
    public Double visitAssign(simpleCalcParser.AssignContext ctx) {
        // New implementation: evaluate the expression and store it in the environment for the given
        // variable name
        String varname=ctx.x.getText();
        Double v = visit(ctx.e);
        env.put(varname,v);

        return v;
    }

    @Override
    public Double visitCondition(simpleCalcParser.ConditionContext ctx) {
        return null;
    }

    @Override
    public Double visitParenthesis(simpleCalcParser.ParenthesisContext ctx){
        return visit(ctx.e);
    };

    @Override
    public Double visitVariable(simpleCalcParser.VariableContext ctx) {
        // New implementation: look up the value of the variable in the environment env:
        String varname=ctx.x.getText();
        Double d=env.get(varname);
        if (d==null){
            System.err.println("Variable "+varname+" is not defined.\n");
            System.exit(-1);
        }
        return d;
    };

    @Override
    public Double visitConstant(simpleCalcParser.ConstantContext ctx){
        return Double.parseDouble(ctx.c.getText());
    }

    @Override
    public Double visitSignedConstant(simpleCalcParser.SignedConstantContext ctx) {
        return Double.parseDouble(ctx.getText());
    }

    @Override
    public Double visitMultiplicationAndDivision(simpleCalcParser.MultiplicationAndDivisionContext ctx) {
        if(ctx.op.getText().equals("*"))
            return visit(ctx.e1) * visit(ctx.e2);
        else
            return visit(ctx.e1) / visit(ctx.e2);
    }

    @Override
    public Double visitAdditionAndSubtraction(simpleCalcParser.AdditionAndSubtractionContext ctx) {
        if(ctx.op.getText().equals("+")){
            return visit(ctx.e1) + visit(ctx.e2);
        }else {
            return visit(ctx.e1) - visit(ctx.e2);
        }
    }

    @Override
    public Double visitCond(simpleCalcParser.CondContext ctx) {
        return null;
    }

    @Override
    public Double visitStatement(simpleCalcParser.StatementContext ctx) {
//TODO does this work?
        if (!ctx.a.isEmpty()) {
            return visit(ctx.assign());
        }
        if (!ctx.i.isEmpty()){
            return visit(ctx.i);
        }
        else return visit(ctx.w);
    }

    @Override
    public Double visitSequence(simpleCalcParser.SequenceContext ctx) {
        for (simpleCalcParser.StatementContext a:ctx.as){
            visit(a);
        }
        return visit(ctx.e);
    }

    @Override
    public Double visitIf_statement(simpleCalcParser.If_statementContext ctx) {
         (if(visit(ctx.e1) == 1.0){
             return visit(ctx.e1);
        })
    }

    @Override
    public Double visitWhile_loop(simpleCalcParser.While_loopContext ctx) {
        return null;
    }
}

